"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import datetime
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-683y9^fvf)uhk1&7vtipe09(znr!o%lgii3@469ji9=-5m7cqt"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = "accounts.User"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "rest_auth",
    "blog.apps.BlogConfig",
    "accounts.apps.AccountsConfig",
    "drf_spectacular",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=15),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=15),
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOG_FILE_PATH = os.path.join(BASE_DIR, "log/debug.log")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOG_FILE_PATH,
        },
    },
    "loggers": {
        "": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Blog API',
    'DESCRIPTION': 'Your project description',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,

}


SECURE_BROWSER_XSS_FILTER = True
# This setting enables the XSS (Cross-Site Scripting) filter in modern web browsers.
# When this is set to True, it instructs the browser to detect and prevent some 
# types of XSS attacks by sanitizing pages to remove potentially malicious scripts
# or code.

SECURE_SSL_REDIRECT = True
# When this setting is enabled (set to True), it ensures that all HTTP requests 
# are redirected to their HTTPS counterparts. In other words, if a user tries
# to access a page using an insecure HTTP connection

SECURE_HSTS_SECONDS = 86400
# This setting defines the duration, in seconds, for which the HSTS policy
# should be active in the user's browser after being communicated by the server. 
# In this case, it's set to 86,400 seconds, which equals one day. During this
# period, the browser will enforce HTTPS connections exclusively for the 
# specified duration after initially visiting the website.

SECURE_HSTS_PRELOAD = True
# When this setting is enabled (set to True), it indicates that the website
# should be included in the HSTS preload list maintained by browsers.
# This preload list is a hardcoded list of websites that will always enforce HTTPS, 
# even for the first visit, for all users accessing the site via supported browsers.
# Being on this list enhances security but requires a commitment to always serving HTTPS.

SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# Enabling this setting (set to True) instructs the browser to apply the 
# HSTS policy not only to the primary domain but also to all its subdomains.
# This ensures that all subdomains will also enforce HTTPS connections when 
# accessing the website.

SESSION_COOKIE_SECURE = True
# hen this setting is enabled, it instructs the web server to only send
# session cookies over HTTPS connections. Session cookies are used to 
# maintain a user's session data between page requests.

CSRF_COOKIE_SECURE = True
# CSRF (Cross-Site Request Forgery) is an attack where a 
# malicious website can make unauthorized requests to a different site where 
# the victim is authenticated.